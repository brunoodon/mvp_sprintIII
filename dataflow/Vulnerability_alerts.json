{
	"name": "Vulnerability_alerts",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Assets",
						"type": "DatasetReference"
					},
					"name": "Assets"
				},
				{
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "VulnAlertsBigtechs",
						"type": "DatasetReference"
					},
					"name": "VulnerabilityAlerts"
				}
			],
			"transformations": [
				{
					"name": "SearchHostsVulns"
				},
				{
					"name": "MicrosoftVulns"
				},
				{
					"name": "AppleVulns"
				},
				{
					"name": "GoogleVulns"
				},
				{
					"name": "BigTechsVulns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          application as string,",
				"          ip as string,",
				"          hostname as string,",
				"          dep as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Assets",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> source1",
				"Assets lookup(application == Product,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> SearchHostsVulns",
				"SearchHostsVulns filter(equalsIgnoreCase({Vendor Project}, 'Microsoft')) ~> MicrosoftVulns",
				"SearchHostsVulns filter(equalsIgnoreCase({Vendor Project}, 'Apple')) ~> AppleVulns",
				"SearchHostsVulns filter(equalsIgnoreCase({Vendor Project}, 'Google')) ~> GoogleVulns",
				"AppleVulns, MicrosoftVulns, GoogleVulns union(byName: true)~> BigTechsVulns",
				"BigTechsVulns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     insertHttpMethod: 'POST',",
				"     timeout: 30,",
				"     requestFormat: ['type' -> 'json'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> VulnerabilityAlerts"
			]
		}
	}
}