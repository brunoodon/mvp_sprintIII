{
	"name": "Vulnerability_alerts",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Assets",
						"type": "DatasetReference"
					},
					"name": "Assets"
				},
				{
					"dataset": {
						"referenceName": "KEV",
						"type": "DatasetReference"
					},
					"name": "KEV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Vulnerability_Alerts",
						"type": "DatasetReference"
					},
					"name": "BigTechsVulnsDF",
					"description": "Export data to BigTechsVulnsDF"
				}
			],
			"transformations": [
				{
					"name": "SearchHostsVulns"
				},
				{
					"name": "MicrosoftVulns"
				},
				{
					"name": "AppleVulns"
				},
				{
					"name": "GoogleVulns"
				},
				{
					"name": "BigTechsVulns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          application as string,",
				"          ip as string,",
				"          hostname as string,",
				"          dep as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Assets",
				"source(output(",
				"          {CVE ID} as string,",
				"          {Vendor Project} as string,",
				"          Product as string,",
				"          {Vulnerability Name} as string,",
				"          {Date Added} as string,",
				"          {Short Description} as string,",
				"          {Required Action} as string,",
				"          {Due Date} as string,",
				"          Notes as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> KEV",
				"Assets, KEV lookup(application == Product,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> SearchHostsVulns",
				"SearchHostsVulns filter(equalsIgnoreCase({Vendor Project}, 'Microsoft')) ~> MicrosoftVulns",
				"SearchHostsVulns filter(equalsIgnoreCase({Vendor Project}, 'Apple')) ~> AppleVulns",
				"SearchHostsVulns filter(equalsIgnoreCase({Vendor Project}, 'Google')) ~> GoogleVulns",
				"AppleVulns, MicrosoftVulns, GoogleVulns union(byName: true)~> BigTechsVulns",
				"BigTechsVulns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          application as string,",
				"          ip as string,",
				"          hostname as string,",
				"          dep as string,",
				"          {CVE ID} as string,",
				"          {Vendor Project} as string,",
				"          Product as string,",
				"          {Vulnerability Name} as string,",
				"          {Date Added} as string,",
				"          {Short Description} as string,",
				"          {Required Action} as string,",
				"          {Due Date} as string,",
				"          Notes as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> BigTechsVulnsDF"
			]
		}
	}
}